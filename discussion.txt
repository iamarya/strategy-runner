when to call strategy after all current finish or by symbol? 
what will happen if you need to depend on another?
during backtest need same like all history completed then call strategy?

multithreading for strategy separately? thread per strategy or per strategy per symbol?

which strategy needs what symbol or send each symbol then strategy decides if need to use?




## ToDo
- Safeguards, ex: engine config validation, safe exit, shutdown hook, error handling (mainly in strategy, also for market data)
- Two type of strategy, 
  - one depends on candle event, which can be back-tested
  - other type depends cant be back-tested depends on timely triggered.
- evaluation of strategy: not just total return also add risk, volatility, drawdown => sharp ratio
- logging framework
- unit test cases 
- Priority wise:
  - backtest
    - kite/ coinbase for market data integration [done]
    - backtest (candle event synthesize) [done]
    - backtest (save as csv) [done]
    - simple strategy
    - db (in-memory)
    - simple report from db
  - ml research
  - paper trading
    - mock order service
  - gsheet integration (db)
  - design for web socket

## ToThink
- how different types of order market, limit during backtest vs real time?
- backtest with time-event case

## ToDo (later, not now)
- serivices will be stateful and singleton
  - service(order-service) -> router(order-router) -> entity(exchange)
  - quoteservice, orderservice and record service will have router
  - marketwatch service will not have router as only one marketwatch enity
- entities like marketwatch, exchange/s, db/s will be singleton but stateful.
- StrategyConfig will passed to get exchange and db to order_service and record_serivice.
- OrderState may be use to pass metadata about a order like time, order execution reason...
